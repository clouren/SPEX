        -:    0:Source:spex_update_forward_sub.c
        -:    0:Graph:spex_update_forward_sub.gcno
        -:    0:Data:spex_update_forward_sub.gcda
        -:    0:Runs:3
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_Update/spex_update_forward_sub.c: sparse forward substitution,
        -:    3:// i.e., compute x = (LD)\v
        -:    4://------------------------------------------------------------------------------
        -:    5:    
        -:    6:// SPEX_Update: (c) 2020-2021, Jinhao Chen, Timothy A. Davis, Erick
        -:    7:// Moreno-Centeno, Texas A&M University.  All Rights Reserved.  See
        -:    8:// SPEX_Update/License for the license.
        -:    9:
        -:   10://------------------------------------------------------------------------------
        -:   11:    
        -:   12:// Purpose: This function is to perform sparse forward substitution, which is
        -:   13:// essentially the same as sparse REF triangular solve for LDx=v, but with v
        -:   14:// as a dense vector. This function assumes v is in the same row permutation as
        -:   15:// L. This function take v as input using x_input, and the solution is stored
        -:   16:// in x_output. In case when v has multiple column, simply iterate this function
        -:   17:// and solve each column at each iteration.
        -:   18:
        -:   19:#include "spex_update_internal.h"
        -:   20:
        -:   21:#define SL(k) (L->v[(k)]->scale)
        -:   22:
     3005:   23:SPEX_info spex_update_forward_sub // perform sparse forward substitution
        -:   24:(
        -:   25:    SPEX_vector *x,     // Input: the right-hand-side vector
        -:   26:                        // Output: solution x
        -:   27:    const SPEX_matrix *L,  // matrix L
        -:   28:    const int64_t *P,   // row permutation
        -:   29:    const SPEX_matrix *rhos,// array of scaled pivots
        -:   30:    int64_t *h          // history vector for x
        -:   31:)
        -:   32:{
        -:   33:    SPEX_info info;
        -:   34:    int sgn;
     3005:   35:    int64_t i, n = L->n;
        -:   36:
        -:   37:    // reset history vector
    21034:   38:    for (i = 0; i < n; i++)
        -:   39:    {
    18029:   40:        h[i] = -1; 
        -:   41:    }
        -:   42:
    20084:   43:    for (i = 0; i < n; i++)
        -:   44:    {
        -:   45:        // skip if x(P[i]) == 0
   17273*:   46:        SPEX_CHECK(SPEX_mpz_sgn(&sgn, x->x[P[i]]));
    17273:   47:        if (sgn == 0)       { continue; }
        -:   48:
        -:   49:        // perform i-th IPGE update for x
    15410:   50:        SPEX_CHECK(spex_update_ipge(x, h, NULL, L->v[i], P, NULL, rhos, i));
        -:   51:    }
        -:   52:
     2811:   53:    return SPEX_OK; 
        -:   54:}
