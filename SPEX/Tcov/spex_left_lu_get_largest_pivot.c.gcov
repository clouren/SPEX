        -:    0:Source:spex_left_lu_get_largest_pivot.c
        -:    0:Graph:spex_left_lu_get_largest_pivot.gcno
        -:    0:Data:spex_left_lu_get_largest_pivot.gcda
        -:    0:Runs:6
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_Left_LU/spex_left_lu_get_largest_pivot: find a pivot entry in a column
        -:    3://------------------------------------------------------------------------------
        -:    4:
        -:    5:// SPEX_Left_LU: (c) 2019-2021, Chris Lourenco (US Naval Academy), Jinhao Chen,
        -:    6:// Erick Moreno-Centeno, Timothy A. Davis, Texas A&M.  All Rights Reserved.
        -:    7:// SPDX-License-Identifier: GPL-2.0-or-later or LGPL-3.0-or-later
        -:    8:
        -:    9://------------------------------------------------------------------------------
        -:   10:
        -:   11:/* Purpose: This function selects the pivot element as the largest in the
        -:   12: * column This is activated if the user sets option->pivot = SPEX_LARGEST.
        -:   13: *
        -:   14: * Note: This pivoting scheme is NOT recommended for SPEX Left LU.  It is provided
        -:   15: * for comparison with other pivoting options.
        -:   16: *
        -:   17: * On output, the index of the largest pivot is returned.
        -:   18: */
        -:   19:
        -:   20:#define SPEX_FREE_ALL   \
        -:   21:    SPEX_MPZ_CLEAR(big);
        -:   22:
        -:   23:#include "spex_left_lu_internal.h"
        -:   24:
      533:   25:SPEX_info spex_left_lu_get_largest_pivot
        -:   26:(
        -:   27:    int64_t *pivot,         // the index of largest pivot
        -:   28:    SPEX_matrix* x,         // kth column of L and U
        -:   29:    int64_t* pivs,          // vector which indicates whether each row
        -:   30:                            // has been pivotal
        -:   31:    int64_t n,              // dimension of problem
        -:   32:    int64_t top,            // nonzero pattern is located in xi[top..n-1]
        -:   33:    int64_t* xi             // nonzero pattern of x
        -:   34:)
        -:   35:{
        -:   36:
        -:   37:    //--------------------------------------------------------------------------
        -:   38:    // check inputs
        -:   39:    //--------------------------------------------------------------------------
        -:   40:
     533*:   41:    SPEX_REQUIRE(x, SPEX_DENSE, SPEX_MPZ);
        -:   42:
        -:   43:    SPEX_info info ;
     533*:   44:    if (!pivs || !xi || !pivot) {return SPEX_INCORRECT_INPUT;}
        -:   45:
        -:   46:    //--------------------------------------------------------------------------
        -:   47:    // allocate workspace
        -:   48:    //--------------------------------------------------------------------------
        -:   49:
        -:   50:    int64_t i, inew ;
        -:   51:    int r ;
      533:   52:    (*pivot) = -1 ;
        -:   53:    mpz_t big ;
      533:   54:    SPEX_MPZ_SET_NULL (big) ;
     533*:   55:    SPEX_CHECK (SPEX_mpz_init (big)) ;
        -:   56:
        -:   57:    //--------------------------------------------------------------------------
        -:   58:    // Iterate accross the nonzeros in x
        -:   59:    //--------------------------------------------------------------------------
        -:   60:
    12407:   61:    for (i = top; i < n; i++)
        -:   62:    {
        -:   63:        // Location of the ith nonzero
    11875:   64:        inew = xi[i];
        -:   65:        // inew can be pivotal
   11875*:   66:        SPEX_CHECK(SPEX_mpz_cmpabs(&r, big, x->x.mpz[inew]));
    11875:   67:        if (pivs[inew] < 0 && r < 0)
        -:   68:        {
        -:   69:            // Current largest pivot location
      480:   70:            (*pivot) = inew;
        -:   71:            // Current largest pivot value
     480*:   72:            SPEX_CHECK(SPEX_mpz_set(big, x->x.mpz[inew]));
        -:   73:        }
        -:   74:    }
        -:   75:
        -:   76:    //--------------------------------------------------------------------------
        -:   77:    // free workspace and return result
        -:   78:    //--------------------------------------------------------------------------
        -:   79:
      532:   80:    SPEX_FREE_ALL;
      532:   81:    if ((*pivot) == -1)
        -:   82:    {
      353:   83:        return SPEX_SINGULAR;
        -:   84:    }
        -:   85:    else
        -:   86:    {
      179:   87:        return SPEX_OK;
        -:   88:    }
        -:   89:}
        -:   90:
