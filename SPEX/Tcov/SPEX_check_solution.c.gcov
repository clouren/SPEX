        -:    0:Source:SPEX_check_solution.c
        -:    0:Graph:SPEX_check_solution.gcno
        -:    0:Data:SPEX_check_solution.gcda
        -:    0:Runs:9
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_Util/spex_check_solution: check solution to Ax=b
        -:    3://------------------------------------------------------------------------------
        -:    4:
        -:    5:// SPEX_Util: (c) 2019-2021, Chris Lourenco (US Naval Academy), Jinhao Chen,
        -:    6:// Erick Moreno-Centeno, Timothy A. Davis, Texas A&M.  All Rights Reserved.
        -:    7:// SPDX-License-Identifier: GPL-2.0-or-later or LGPL-3.0-or-later
        -:    8:
        -:    9://------------------------------------------------------------------------------
        -:   10:
        -:   11:/* Purpose: Given a solution vector x, check the solution of the linear system
        -:   12: * Ax = b. This is done by computing a rational-arthmetic A*x == b. This function
        -:   13: * is only used for debugging purposes, as the routines within SPEX are gauranteed
        -:   14: * to be exact.
        -:   15: */
        -:   16:
        -:   17:#define SPEX_FREE_ALL                       \
        -:   18:    SPEX_MPQ_CLEAR(temp);                   \
        -:   19:    SPEX_matrix_free(&b2, NULL);
        -:   20:
        -:   21:#include "spex_util_internal.h"
        -:   22:
       30:   23:SPEX_info SPEX_check_solution
        -:   24:(
        -:   25:    const SPEX_matrix *A,         // Input matrix
        -:   26:    const SPEX_matrix *x,         // Solution vectors
        -:   27:    const SPEX_matrix *b,         // Right hand side vectors
        -:   28:    const SPEX_options* option    // Command options
        -:   29:)
        -:   30:{
      30*:   31:    if (!spex_initialized ( )) return (SPEX_PANIC) ;
        -:   32:
        -:   33:    //--------------------------------------------------------------------------
        -:   34:    // check inputs. Input are also checked by the two callers
        -:   35:    //--------------------------------------------------------------------------
        -:   36:
        -:   37:    SPEX_info info ;
      30*:   38:    SPEX_REQUIRE (A, SPEX_CSC,   SPEX_MPZ) ;
      30*:   39:    SPEX_REQUIRE (x, SPEX_DENSE, SPEX_MPQ) ;
      30*:   40:    SPEX_REQUIRE (b, SPEX_DENSE, SPEX_MPZ) ;
        -:   41:
        -:   42:    //--------------------------------------------------------------------------
        -:   43:    // Declare vars
        -:   44:    //--------------------------------------------------------------------------
        -:   45:
        -:   46:    int64_t p, j, i ;
       30:   47:    SPEX_matrix *b2 = NULL;   // b2 stores the solution of A*x
       30:   48:    mpq_t temp; SPEX_MPQ_SET_NULL(temp);
        -:   49:
      30*:   50:    SPEX_CHECK (SPEX_mpq_init(temp));
       28:   51:    SPEX_CHECK (SPEX_matrix_allocate(&b2, SPEX_DENSE, SPEX_MPQ, b->m, b->n,
        -:   52:        b->nzmax, false, true, option));
        -:   53:
        -:   54:    //--------------------------------------------------------------------------
        -:   55:    // perform SPEX_mpq_addmul in loops to compute b2 = A*x
        -:   56:    //--------------------------------------------------------------------------
        -:   57:
       23:   58:    for (j = 0; j < b->n; j++)
        -:   59:    {
      562:   60:        for (i = 0; i < b->m; i++)
        -:   61:        {
     3254:   62:            for (p = A->p[i]; p < A->p[i + 1]; p++)
        -:   63:            {
        -:   64:                // temp = A[p][i] (note this must be done seperately since A is
        -:   65:                // mpz and temp is mpq)
    2709*:   66:                SPEX_CHECK(SPEX_mpq_set_z(temp, A->x.mpz[p]));
        -:   67:
        -:   68:                // temp = temp*x[i]
     2709:   69:                SPEX_CHECK(SPEX_mpq_mul(temp, temp,
        -:   70:                                        SPEX_2D(x, i, j, mpq)));
        -:   71:
        -:   72:                // b2[p] = b2[p]-temp
     2707:   73:                SPEX_CHECK(SPEX_mpq_add(SPEX_2D(b2, A->i[p], j, mpq),
        -:   74:                                        SPEX_2D(b2, A->i[p], j, mpq),temp));
        -:   75:            }
        -:   76:        }
        -:   77:    }
        -:   78:
        -:   79:    //--------------------------------------------------------------------------
        -:   80:    // check if b==b2
        -:   81:    //--------------------------------------------------------------------------
        -:   82:
       13:   83:    for (j = 0; j < b->n; j++)
        -:   84:    {
      542:   85:        for (i = 0; i < b->m; i++)
        -:   86:        {
        -:   87:            // temp = b[i] (correct b)
     537*:   88:            SPEX_CHECK(SPEX_mpq_set_z(temp, SPEX_2D(b, i, j, mpz)));
        -:   89:
        -:   90:            // set check false if b!=b2
        -:   91:            int r ;
     537*:   92:            SPEX_CHECK(SPEX_mpq_equal(&r, temp, SPEX_2D(b2, i, j, mpq)));
      537:   93:            if (r == 0)
        -:   94:            {
        2:   95:                info = SPEX_INCORRECT;
        2:   96:                j = b->n;
        2:   97:                break;
        -:   98:            }
        -:   99:        }
        -:  100:    }
        -:  101:
        -:  102:    //--------------------------------------------------------------------------
        -:  103:    // Print info
        -:  104:    //--------------------------------------------------------------------------
        -:  105:
       6*:  106:    int pr = SPEX_OPTION_PRINT_LEVEL (option) ;
        6:  107:    if (info == SPEX_OK)
        -:  108:    {
        4:  109:        SPEX_PR1 ("Solution is verified to be exact.\n") ;
        -:  110:    }
        2:  111:    else if (info == SPEX_INCORRECT)
        -:  112:    {
        -:  113:        // This can never happen.
        2:  114:        SPEX_PR1 ("ERROR! Solution is wrong. This is a bug; please "
        -:  115:                  "contact the authors of SPEX.\n") ;
        -:  116:    }
        -:  117:
        -:  118:    //--------------------------------------------------------------------------
        -:  119:    // Free memory
        -:  120:    //--------------------------------------------------------------------------
        -:  121:
        6:  122:    SPEX_FREE_ALL;
        6:  123:    return info;
        -:  124:}
        -:  125:
