        -:    0:Source:SPEX_realloc.c
        -:    0:Graph:SPEX_realloc.gcno
        -:    0:Data:SPEX_realloc.gcda
        -:    0:Runs:9
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_Util/SPEX_realloc: wrapper for realloc
        -:    3://------------------------------------------------------------------------------
        -:    4:
        -:    5:// SPEX_Util: (c) 2019-2021, Chris Lourenco (US Naval Academy), Jinhao Chen,
        -:    6:// Erick Moreno-Centeno, Timothy A. Davis, Texas A&M.  All Rights Reserved.
        -:    7:// SPDX-License-Identifier: GPL-2.0-or-later or LGPL-3.0-or-later
        -:    8:
        -:    9://------------------------------------------------------------------------------
        -:   10:
        -:   11:#include "spex_util_internal.h"
        -:   12:
        -:   13:// SPEX_realloc is a wrapper for realloc.  If p is non-NULL on input, it points
        -:   14:// to a previously allocated object of size nitems_old * size_of_item.  The
        -:   15:// object is reallocated to be of size nitems_new * size_of_item.  If p is NULL
        -:   16:// on input, then a new object of that size is allocated.  On success, a
        -:   17:// pointer to the new object is returned.  If the reallocation fails, p is not
        -:   18:// modified, and a flag is returned to indicate that the reallocation failed.
        -:   19:// If the size decreases or remains the same, then the method always succeeds
        -:   20:// (ok is returned as true).
        -:   21:
        -:   22:// Typical usage:  the following code fragment allocates an array of 10 int's,
        -:   23:// and then increases the size of the array to 20 int's.  If the SPEX_malloc
        -:   24:// succeeds but the SPEX_realloc fails, then the array remains unmodified,
        -:   25:// of size 10.
        -:   26://
        -:   27://      int *p ;
        -:   28://      p = SPEX_malloc (10 * sizeof (int)) ;
        -:   29://      if (p == NULL) { error here ... }
        -:   30://      printf ("p points to an array of size 10 * sizeof (int)\n") ;
        -:   31://      bool ok ;
        -:   32://      p = SPEX_realloc (20, 10, sizeof (int), p, &ok) ;
        -:   33://      if (ok) printf ("p has size 20 * sizeof (int)\n") ;
        -:   34://      else printf ("realloc failed; p still has size 10 * sizeof (int)\n") ;
        -:   35://      SPEX_FREE (p) ;
        -:   36:
   578716:   37:void *SPEX_realloc      // pointer to reallocated block, or original block
        -:   38:                        // if the realloc failed
        -:   39:(
        -:   40:    int64_t nitems_new,     // new number of items in the object
        -:   41:    int64_t nitems_old,     // old number of items in the object
        -:   42:    size_t size_of_item,    // sizeof each item
        -:   43:    void *p,                // old object to reallocate
        -:   44:    bool *ok                // true if success, false on failure
        -:   45:)
        -:   46:{
   578716:   47:    if (!spex_initialized ( ))
        -:   48:    {
        2:   49:        (*ok) = false ;
        2:   50:        return (p) ;
        -:   51:    }
        -:   52:
        -:   53:    int result ;
   578714:   54:    void *pnew = SuiteSparse_realloc ((size_t) nitems_new, (size_t) nitems_old,
        -:   55:        size_of_item, p, &result) ;
   578714:   56:    (*ok) = (result != 0) ;
   578714:   57:    return (pnew) ;
        -:   58:}
        -:   59:
