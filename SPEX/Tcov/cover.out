=================================================================
SPEX_calloc.c.gcov
=================================================================
=================================================================
spex_cast_array.c.gcov
=================================================================
=================================================================
spex_cast_matrix.c.gcov
=================================================================
=================================================================
SPEX_check_solution.c.gcov
=================================================================
=================================================================
SPEX_create_default_options.c.gcov
=================================================================
=================================================================
spex_create_mpfr_array.c.gcov
=================================================================
=================================================================
spex_create_mpq_array.c.gcov
=================================================================
=================================================================
spex_create_mpz_array.c.gcov
=================================================================
=================================================================
spex_CSC_mpz_to_dynamic.c.gcov
=================================================================
=================================================================
SPEX_cumsum.c.gcov
=================================================================
=================================================================
spex_delete_mpz_array.c.gcov
=================================================================
=================================================================
SPEX_determine_symmetry.c.gcov
=================================================================
        -:   32:    SPEX_matrix_free(&R,NULL);      \
        -:   33:}
        -:   34:
        -:   35:#include "spex_util_internal.h"
        -:   36:
    #####:   37:SPEX_info SPEX_determine_symmetry
        -:   38:(
        -:   39:    SPEX_matrix* A,
        -:   40:    bool check_if_numerically_symmetric,
        -:   41:            // if true, check A=A' (pattern & values). if false,
        -:   42:            // only check if the pattern of A is symmetric, not
--
        -:   45:)
        -:   46:{
        -:   47:    int64_t j;
        -:   48:    SPEX_info info;
        -:   49:    // Declare matrix T
    #####:   50:    SPEX_matrix *T = NULL, *R = NULL ;
        -:   51:    // T = A'
    #####:   52:    SPEX_CHECK( SPEX_transpose(&T, A, option));
        -:   53:
        -:   54:    // Check if column pointers are the same
    #####:   55:    for (j = 0; j <= A->n; j++)
        -:   56:    {
    #####:   57:        if (T->p[j] != A->p[j])
        -:   58:        {
        -:   59:            // nnz( A(:,k)) != nnz( A'(:,k))
    #####:   60:            SPEX_FREE_ALL ;
    #####:   61:            return SPEX_UNSYMMETRIC;
        -:   62:        }
        -:   63:    }
        -:   64:
        -:   65:    // R = T'
    #####:   66:    SPEX_CHECK( SPEX_transpose(&R, T, option));
        -:   67:    // then compare R and T
        -:   68:
        -:   69:    // Check if i values are the same
    #####:   70:    for (j = 0; j < R->nz; j++)
        -:   71:    {
    #####:   72:        if (T->i[j] != R->i[j])
        -:   73:        {
        -:   74:            // A[i][j] != A[j][i], unsymmetric
    #####:   75:            SPEX_FREE_ALL ;
    #####:   76:            return SPEX_UNSYMMETRIC;
        -:   77:        }
        -:   78:    }
        -:   79:
        -:   80:    // If we are performing an exhaustive search, we check the x values as well
        -:   81:    // This is by far the most expensive part of checking the symmetry.
    #####:   82:    if (check_if_numerically_symmetric)
        -:   83:    {
        -:   84:        int r;
    #####:   85:        for (j = 0; j < R->nz; j++)
        -:   86:        {
    #####:   87:            SPEX_CHECK(SPEX_mpz_cmp(&r, R->x.mpz[j], T->x.mpz[j]));
    #####:   88:            if ( r != 0)
        -:   89:            {
        -:   90:                // Pattern is symmetric, values are not
    #####:   91:                SPEX_FREE_ALL ;
    #####:   92:                return SPEX_UNSYMMETRIC;
        -:   93:            }
        -:   94:        }
        -:   95:    }
    #####:   96:    SPEX_FREE_ALL ;
    #####:   97:    return SPEX_OK;
        -:   98:}
        -:   99:
=================================================================
spex_dynamic_to_CSC_mpz.c.gcov
=================================================================
=================================================================
spex_expand_double_array.c.gcov
=================================================================
=================================================================
spex_expand_mpfr_array.c.gcov
=================================================================
=================================================================
spex_expand_mpq_array.c.gcov
=================================================================
=================================================================
SPEX_finalize.c.gcov
=================================================================
=================================================================
SPEX_free.c.gcov
=================================================================
=================================================================
SPEX_gmp.c.gcov
=================================================================
        -:  398:/* Safely print to the standard output stdout. Return positive value (the number
        -:  399: * of characters written) upon success, otherwise return negative value (error
        -:  400: * code) */
        -:  401:
        -:  402:/* This function is currently unused, but kept here for future reference. */
    #####:  403:SPEX_info SPEX_gmp_printf
        -:  404:(
        -:  405:    const char *format,
        -:  406:    ...
        -:  407:)
        -:  408:{
        -:  409:    // Start the GMP wrapper
    #####:  410:    SPEX_GMP_WRAPPER_START ;
        -:  411:
        -:  412:    // call gmp_vprintf
        -:  413:    va_list args;
    #####:  414:    va_start (args, format) ;
    #####:  415:    int n = gmp_vprintf (format, args) ; 
    #####:  416:    va_end (args) ;
        -:  417:
        -:  418:    // Finish the wrapper
    #####:  419:    SPEX_GMP_WRAPPER_FINISH ;
        -:  420:    // gmp_vprintf returns -1 if an error occurred.
    #####:  421:    return ((n < 0) ? SPEX_INCORRECT_INPUT : SPEX_OK) ;
        -:  422:}
        -:  423:
        -:  424:
        -:  425://------------------------------------------------------------------------------
        -:  426:// SPEX_gmp_asprintf
--
        -:  932:)
        -:  933:{
  118259*:  934:    SPEX_GMPZ_WRAPPER_START (q) ;
   118259:  935:    if (mpz_sgn(d)==0)
        -:  936:    {
    #####:  937:        SPEX_GMP_WRAPPER_FINISH ;
    #####:  938:        return SPEX_PANIC;
        -:  939:    }
   118259:  940:    mpz_fdiv_q (q, n, d) ;
   118259:  941:    SPEX_GMP_WRAPPER_FINISH ;
   118259:  942:    return (SPEX_OK) ;
        -:  943:}
--
        -:  960:)
        -:  961:{
   75161*:  962:    SPEX_GMPZ_WRAPPER_START (q) ;
    75161:  963:    if (mpz_sgn(d)==0)
        -:  964:    {
    #####:  965:        SPEX_GMP_WRAPPER_FINISH ;
    #####:  966:        return SPEX_PANIC;
        -:  967:    }
    75161:  968:    mpz_cdiv_q (q, n, d) ;
    75161:  969:    SPEX_GMP_WRAPPER_FINISH ;
    75161:  970:    return (SPEX_OK) ;
        -:  971:}
--
        -:  989:)
        -:  990:{
    4427*:  991:    SPEX_GMPZ_WRAPPER_START2 (q, r) ;
     4427:  992:    if (mpz_sgn(d)==0)
        -:  993:    {
    #####:  994:        SPEX_GMP_WRAPPER_FINISH ;
    #####:  995:        return SPEX_PANIC;
        -:  996:    }
     4427:  997:    mpz_cdiv_qr (q, r, n, d) ;
     4427:  998:    SPEX_GMP_WRAPPER_FINISH ;
     4427:  999:    return (SPEX_OK) ;
        -: 1000:}
--
        -: 1013:)
        -: 1014:{
  868587*: 1015:    SPEX_GMPZ_WRAPPER_START (x) ;
   868587: 1016:    if (mpz_sgn(z)==0)
        -: 1017:    {
    #####: 1018:        SPEX_GMP_WRAPPER_FINISH ;
    #####: 1019:        return SPEX_PANIC;
        -: 1020:    }
        -: 1021:#ifdef SPEX_DEBUG
        -: 1022:    mpq_t r;
        -: 1023:    mpq_init(r); // r = 0/1
        -: 1024:    mpz_fdiv_r(SPEX_MPQ_NUM(r),y,z);
--
        -: 1437:// SPEX_mpq_swap
        -: 1438://------------------------------------------------------------------------------
        -: 1439:
        -: 1440:/* Purpose: Safely swap the values x and y efficiently */
        -: 1441:
    #####: 1442:SPEX_info SPEX_mpq_swap
        -: 1443:(
        -: 1444:    mpq_t x,
        -: 1445:    mpq_t y
        -: 1446:)
        -: 1447:{
    #####: 1448:    SPEX_GMP_WRAPPER_START ;
    #####: 1449:    mpq_swap (x, y) ;
    #####: 1450:    SPEX_GMP_WRAPPER_FINISH ;
    #####: 1451:    return (SPEX_OK) ;
        -: 1452:}
        -: 1453:
        -: 1454://------------------------------------------------------------------------------
        -: 1455:// SPEX_mpq_neg
        -: 1456://------------------------------------------------------------------------------
--
        -: 1589://------------------------------------------------------------------------------
        -: 1590:
        -: 1591:/* Purpose: Safely check if a mpq number equals to a mpz number,
        -: 1592: * r = 0 (r = false) if x != y, r < 0 if x < y, or r > 0 if x > y */
        -: 1593:
    #####: 1594:SPEX_info SPEX_mpq_cmp_z
        -: 1595:(
        -: 1596:    int *r,
        -: 1597:    const mpq_t x,
        -: 1598:    const mpz_t y
        -: 1599:)
        -: 1600:{
    #####: 1601:    SPEX_GMP_WRAPPER_START ;
    #####: 1602:    *r = mpq_cmp_z (x, y) ;
    #####: 1603:    SPEX_GMP_WRAPPER_FINISH ;
    #####: 1604:    return (SPEX_OK) ;
        -: 1605:}
        -: 1606:
        -: 1607://------------------------------------------------------------------------------
        -: 1608:// SPEX_mpq_equal
        -: 1609://------------------------------------------------------------------------------
=================================================================
SPEX_initialize.c.gcov
=================================================================
=================================================================
SPEX_initialize_expert.c.gcov
=================================================================
=================================================================
SPEX_Left_LU_backslash.c.gcov
=================================================================
=================================================================
spex_left_lu_back_sub.c.gcov
=================================================================
=================================================================
spex_left_lu_dfs.c.gcov
=================================================================
=================================================================
SPEX_Left_LU_factorize.c.gcov
=================================================================
=================================================================
spex_left_lu_forward_sub.c.gcov
=================================================================
=================================================================
spex_left_lu_get_largest_pivot.c.gcov
=================================================================
=================================================================
spex_left_lu_get_nonzero_pivot.c.gcov
=================================================================
=================================================================
spex_left_lu_get_pivot.c.gcov
=================================================================
=================================================================
spex_left_lu_get_smallest_pivot.c.gcov
=================================================================
=================================================================
spex_left_lu_permute_b.c.gcov
=================================================================
=================================================================
spex_left_lu_permute_x.c.gcov
=================================================================
=================================================================
spex_left_lu_reach.c.gcov
=================================================================
=================================================================
spex_left_lu_ref_triangular_solve.c.gcov
=================================================================
=================================================================
SPEX_Left_LU_solve.c.gcov
=================================================================
=================================================================
SPEX_LU_analysis_free.c.gcov
=================================================================
=================================================================
SPEX_LU_analyze.c.gcov
=================================================================
=================================================================
SPEX_malloc.c.gcov
=================================================================
=================================================================
SPEX_matrix_allocate.c.gcov
=================================================================
=================================================================
SPEX_matrix_check.c.gcov
=================================================================
=================================================================
SPEX_matrix_copy.c.gcov
=================================================================
=================================================================
SPEX_matrix_div.c.gcov
=================================================================
=================================================================
SPEX_matrix_free.c.gcov
=================================================================
=================================================================
SPEX_matrix_mul.c.gcov
=================================================================
=================================================================
SPEX_matrix_nnz.c.gcov
=================================================================
=================================================================
SPEX_realloc.c.gcov
=================================================================
=================================================================
spex_sparse_collapse.c.gcov
=================================================================
=================================================================
spex_sparse_realloc.c.gcov
=================================================================
=================================================================
SPEX_transpose.c.gcov
=================================================================
=================================================================
spex_update_backward_sub.c.gcov
=================================================================
=================================================================
SPEX_Update_Chol_Rank1.c.gcov
=================================================================
=================================================================
spex_update_cppu.c.gcov
=================================================================
=================================================================
spex_update_dppu1.c.gcov
=================================================================
=================================================================
spex_update_dppu2.c.gcov
=================================================================
=================================================================
spex_update_finalize_and_insert_vk.c.gcov
=================================================================
=================================================================
spex_update_forward_sub.c.gcov
=================================================================
=================================================================
spex_update_get_scattered_v.c.gcov
=================================================================
=================================================================
spex_update_insert_new_entry.c.gcov
=================================================================
=================================================================
spex_update_ipge.c.gcov
=================================================================
=================================================================
SPEX_Update_LU_ColRep.c.gcov
=================================================================
=================================================================
SPEX_Update_matrix_canonicalize.c.gcov
=================================================================
=================================================================
SPEX_Update_permute_row.c.gcov
=================================================================
=================================================================
SPEX_Update_Solve.c.gcov
=================================================================
=================================================================
spex_update_triangular_solve.c.gcov
=================================================================
=================================================================
spex_update_verify.c.gcov
=================================================================
=================================================================
spex_util_internal.h.gcov
=================================================================
=================================================================
SPEX_vector_allocate.c.gcov
=================================================================
=================================================================
SPEX_vector_free.c.gcov
=================================================================
=================================================================
SPEX_vector_realloc.c.gcov
=================================================================
=================================================================
