        -:    0:Source:spex_create_mpz_array.c
        -:    0:Graph:spex_create_mpz_array.gcno
        -:    0:Data:spex_create_mpz_array.gcda
        -:    0:Runs:9
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_Util/spex_create_mpz_array: create a dense mpz array
        -:    3://------------------------------------------------------------------------------
        -:    4:
        -:    5:// SPEX_Util: (c) 2019-2021, Chris Lourenco (US Naval Academy), Jinhao Chen,
        -:    6:// Erick Moreno-Centeno, Timothy A. Davis, Texas A&M.  All Rights Reserved.
        -:    7:// SPDX-License-Identifier: GPL-2.0-or-later or LGPL-3.0-or-later
        -:    8:
        -:    9://------------------------------------------------------------------------------
        -:   10:
        -:   11:/* Purpose: This function creates an mpz array of size n.
        -:   12: * Utilized internally for creating SPEX_MPZ matrices
        -:   13: */
        -:   14:
        -:   15:#include "spex_util_internal.h"
        -:   16:
   107999:   17:mpz_t* spex_create_mpz_array
        -:   18:(
        -:   19:    int64_t n            // size of the array
        -:   20:)
        -:   21:{
        -:   22:
        -:   23:    //--------------------------------------------------------------------------
        -:   24:    // check inputs
        -:   25:    //--------------------------------------------------------------------------
        -:   26:
  107999*:   27:    if (n <= 0) {return NULL;}
        -:   28:
        -:   29:    //--------------------------------------------------------------------------
        -:   30:
        -:   31:    // Malloc space
   107999:   32:    mpz_t* x = (mpz_t*) SPEX_calloc(n, sizeof(mpz_t));
   107999:   33:    if (!x) {return NULL;}
  1051896:   34:    for (int64_t i = 0; i < n; i++)
        -:   35:    {
   947107:   36:        if (SPEX_mpz_init(x[i]) != SPEX_OK)
        -:   37:        {
        -:   38:            // NOTE: This can be triggered only when using GMP-6.1.2 or earlier
        -:   39:            // versions. For GMP-6.2.1 or later versions, there will be no
        -:   40:            // memory allocation, and thus such failure will never occur.
        -:   41:            // Out of memory
     2736:   42:            SPEX_MPZ_SET_NULL(x[i]);
    25578:   43:            for (int64_t j = 0; j < n; j++)
        -:   44:            {
    22842:   45:                if ( x[j] != NULL)
        -:   46:                {
    22842:   47:                    SPEX_MPZ_CLEAR( x[j]);
        -:   48:                }
        -:   49:            }
     2736:   50:            SPEX_FREE(x);
     2736:   51:            return NULL;
        -:   52:        }
        -:   53:    }
   104789:   54:    return x;
        -:   55:}
        -:   56:
