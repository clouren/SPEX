        -:    0:Source:SPEX_Update_matrix_canonicalize.c
        -:    0:Graph:SPEX_Update_matrix_canonicalize.gcno
        -:    0:Data:SPEX_Update_matrix_canonicalize.gcda
        -:    0:Runs:3
        -:    1://------------------------------------------------------------------------------
        -:    2:// SPEX_Update/SPEX_Update_matrix_canonicalize.c: canonicalize a SPEX_matrix
        -:    3:// matrix such that the pivot of the vector is found as the first entry of the
        -:    4:// nnz list.
        -:    5://------------------------------------------------------------------------------
        -:    6:
        -:    7:// SPEX_Update: (c) 2020-2021, Jinhao Chen, Chris Lourenco (US Naval Academy),
        -:    8:// Erick Moreno-Centeno, Timothy A. Davis, Texas A&M.  All Rights Reserved.
        -:    9:// SPDX-License-Identifier: GPL-2.0-or-later or LGPL-3.0-or-later
        -:   10:
        -:   11://------------------------------------------------------------------------------
        -:   12:
        -:   13:// SPEX_Update_matrix_canonicalize is called to canonicalize a SPEX_matrix
        -:   14:// matrix in SPEX_DYNAMIC_CSC format, such that the pivot of the vector is
        -:   15:// found as the first entry of the nnz list.
        -:   16:
        -:   17:#include "spex_update_internal.h"
        -:   18:
       19:   19:SPEX_info SPEX_Update_matrix_canonicalize
        -:   20:(
        -:   21:    SPEX_matrix *A,       // the matrix to be canonicalize
        -:   22:    const int64_t *perm,  // the permuation vector applied on each vector of A,
        -:   23:                          // considered as identity if input as NULL
        -:   24:    const SPEX_options *option
        -:   25:)
        -:   26:{
        -:   27:    // check inputs
      19*:   28:    if (!spex_initialized()) {return SPEX_PANIC;}
      19*:   29:    SPEX_REQUIRE_KIND(A, SPEX_DYNAMIC_CSC);
        -:   30:
        -:   31:    // initialize workspace
        -:   32:    SPEX_info info;
        -:   33:    int64_t i, j, p, diag;
        -:   34:
        -:   35:    // iterate accross each vector to find the pivot and move to first entry
      180:   36:    for (j = 0; j < A->n; j++)
        -:   37:    {
     161*:   38:        diag = (perm == NULL) ? j : perm[j];
      348:   39:        for (p = 0; p < A->v[j]->nz; p++)
        -:   40:        {
      299:   41:            i = A->v[j]->i[p];
      299:   42:            if (i == diag)
        -:   43:            {
      112:   44:                if (p != 0)
        -:   45:                {
      10*:   46:                    SPEX_CHECK(SPEX_mpz_swap(A->v[j]->x[0], A->v[j]->x[p]));
       10:   47:                    A->v[j]->i[p] = A->v[j]->i[0];
       10:   48:                    A->v[j]->i[0] = i;
        -:   49:                }
      112:   50:                break;
        -:   51:            }
        -:   52:        }
        -:   53:    }
       19:   54:    return SPEX_OK;
        -:   55:}
